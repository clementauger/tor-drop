// Code generated by go-bindata.
// sources:
// assets/normalize.css
// templates/create-folder.tpl
// templates/folder-listing.tpl
// templates/folder-login.tpl
// templates/index.tpl
// templates/layout.tpl
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsNormalizeCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x4b\x8f\xe4\xb6\x11\xbe\xeb\x57\x54\x16\xd8\xcb\xa4\xd5\x8f\x59\x8c\xd7\xd0\xc0\x87\xc4\x59\x07\x0b\xc4\x70\x90\xf1\xcd\x18\xa0\x29\xb1\xd4\x62\x86\x62\x09\x24\xd5\x8f\x59\xe7\xbf\x07\x24\x25\xb5\x9e\xed\x24\xd8\x09\xbc\x97\x9d\xa6\xa8\x7a\x7f\x55\x5f\x69\x73\xf7\x07\x50\xa4\x4b\x26\xc5\x2b\xae\x33\x63\xe0\xf8\xed\x7a\xbb\xde\xc1\xaf\xf0\xe3\xe7\x9f\xe1\x6f\x22\x43\x65\x10\x7e\x85\x83\xb0\x45\x9d\xae\x33\x2a\x37\x0a\x33\x92\xcc\x6c\x86\xef\xdd\x6d\xa2\x68\x73\x07\x7f\xa1\xac\x2e\x51\xd9\x08\x00\xbe\xfb\x6a\xff\x1a\xe9\x77\x11\xdc\xc1\x6e\x0d\xdf\x93\xd6\x98\x59\xb0\x05\x82\x14\x0a\xa1\x40\x71\x28\x2c\x08\x05\x4c\x4a\x48\x35\x9d\x0c\x6a\xb3\x76\xd7\xef\xd7\xf0\x77\x8d\x47\x54\x16\x18\xff\x67\x6d\xac\xb3\xce\x00\xe5\x90\x93\xb2\x60\xc4\x2b\x02\xcb\x2d\x6a\x20\x2d\x50\x59\x66\x05\x29\xc8\x0a\xa6\x0e\x68\x9c\x44\xf1\xd3\x93\x13\xb4\x89\xa2\xc2\x96\x12\xbe\x44\xe0\x75\xc6\x41\x67\x02\xbb\xf5\xee\xe1\x11\x36\x77\xb0\x73\x97\x00\xe2\x13\xa6\x2f\xc2\xc6\x16\xcf\x36\x76\xe2\xe3\xa0\x37\x81\xdd\x76\xfb\xde\xdf\xbc\x77\x37\xff\xe5\xe3\xf5\x84\x99\x53\x68\xde\x2e\x5e\xff\xc0\x92\x8e\xe8\x63\x55\x32\x7d\x70\x1e\x4d\xc3\xb4\x89\xa2\x94\xf8\xc5\x7b\x17\x6e\x25\xb0\x7d\x0c\x36\x36\x52\x14\x47\xed\xa5\xec\x4b\x26\xd4\x1e\x50\xa2\x0b\x25\x64\xa4\x8c\x30\x16\x95\x95\x17\x27\xfa\xf3\xa7\x46\xa0\xbb\xe6\x05\x72\x61\x2a\xc9\x2e\x09\xa4\x92\xb2\x97\xbe\xd4\x7e\x22\x7b\xe9\x50\xbc\x35\x95\x14\xec\x8b\x5d\xa7\xcc\xc0\x49\xd8\x42\x28\xd8\x9b\x10\xb7\xbd\xbb\xec\x24\xed\x99\xb6\x22\x93\xb8\x77\xf6\xb8\xd0\xfb\xdc\x7d\x5f\x68\x2a\x71\x05\x3f\x08\x8d\x39\x9d\x57\x5e\xf4\x13\xcb\x99\x16\x6d\x4e\x77\xde\x44\xa7\xdc\x27\x2b\x81\x7b\x2c\x1f\xfb\x51\x58\x7f\xf3\x11\xcb\x2e\x18\xf0\x57\x4d\x75\x25\xd4\x21\xe8\x79\xe3\x42\xff\x13\xe7\x3e\x36\x59\x13\xa7\x94\xce\x2e\x44\x4e\xbd\x50\xad\x57\x6d\x99\x3f\x15\x74\xf2\xb7\xe9\x88\x3a\x97\x74\x72\x77\x3e\xf1\x43\x08\x68\x97\x96\x42\x7b\x8f\x53\x3a\xc7\x41\x54\xd2\xba\x12\xa7\x74\xee\x57\x72\x5b\xe1\xdb\xfe\x61\x2b\x3c\x81\xa3\x30\x22\x95\x38\xaa\xe8\x39\x8c\x0a\x55\xa0\x16\x96\xa9\x2c\xd8\x62\x32\x26\x9d\x0f\x03\x10\x2e\x80\xb7\x2f\x87\x38\x87\x3d\x96\xfb\xee\xad\x26\x10\x33\xd5\x5c\x69\xbc\x26\x36\x67\xa5\x90\x97\x04\x4a\x52\x64\x2a\x96\xe1\xea\xfa\x67\xdf\xb7\x5e\x15\xec\xb0\x1c\x43\xf5\x67\x07\x68\x89\x47\x94\x60\xb0\x64\xca\x8a\xec\xff\x03\xdb\x83\x66\x17\x48\x59\xf6\x72\xd0\x54\x2b\xee\x40\xc1\x32\x2b\x8e\xbe\xf9\xbd\x98\x00\x3a\xd8\x6d\x1b\xd7\x59\xc8\x6f\x77\x3f\xce\x48\x92\x4e\xc0\x6a\xa6\x4c\xc5\x34\x2a\xfb\x38\xcc\x55\x4f\x57\x4a\xd6\x52\x09\x29\x69\x07\xf7\x0e\x42\xf0\xf0\x31\x6e\x12\x32\xae\x49\x07\x36\xe0\x98\x91\x0e\xad\xb3\x07\x3b\x57\x7c\x2b\xf8\xfc\x69\x05\x3f\x55\xa8\xd9\x0c\xfc\x58\x9a\xea\x5f\xac\xb0\x12\x9f\x9b\xaa\x74\x7a\xe3\x60\x45\x02\x8a\xd4\x20\x41\xbe\xa7\x5e\x75\x25\x50\xbb\xae\xe4\xda\xf1\x35\x59\xb7\x6e\x01\x27\x6b\x91\xcf\x95\xec\xd8\x2d\x5f\x62\xa7\x6e\xae\x0c\x5d\x9a\xf8\x91\xae\x22\x63\x35\xa9\xc3\xb5\xe8\x4e\x0d\x7a\x52\x92\x1c\xf5\xe3\xef\x0a\x1d\x19\x71\x5c\x45\x2f\x29\x5f\x45\x86\x95\xd5\x57\x46\xca\x72\x3c\x97\x5c\xd9\x44\x91\x29\xdd\xe1\xa8\x17\x7f\xbb\x7d\xdf\x0f\x5c\x3b\xc8\xf7\xa6\x4e\x7d\xe7\x77\x7f\x55\xbd\xe9\x90\x6b\x2a\x81\xe5\xb9\x1b\x0e\xea\x30\xc3\x0f\x9c\x94\x39\xe5\xb5\x4b\x60\x5d\x8d\xf5\x7f\x7c\x78\xff\x38\x9e\xf7\x5b\x77\x52\x91\x11\xa1\xb6\x34\x4a\xe6\xb0\xe8\x4e\x8f\xe8\x86\x10\x93\x31\x93\xe2\xa0\x12\x48\x99\x41\x5f\x9c\xce\x07\x53\xa7\x4d\x89\x87\xda\x8e\xb7\xeb\xfb\x07\x37\x6b\xfc\xb3\xa0\xda\x52\xe5\x1f\xb4\xe7\x9b\x3b\xf8\x54\xa6\xc8\x39\xf2\xb7\x9f\x37\x83\x2e\xe0\xe1\xef\xd0\x5c\xb2\xc0\x83\x8c\xe0\x0b\xfd\x46\x94\x87\x3e\x76\x8d\xbd\x48\x6c\xa0\xdb\xf8\xf0\x03\xe9\xf2\x0d\x5b\xa5\xc3\x93\xe7\x6b\x3d\x1e\xe1\x8c\x30\x4b\xa8\x99\xa5\x44\xcd\x34\x9d\xc1\x76\x6d\x2d\xa9\x55\x24\x54\x55\xdb\x55\x44\x95\x75\x7d\xb5\x5a\x45\x06\x25\x66\x76\x15\xb9\x7e\xc3\x34\xb2\x29\x8c\x1a\x68\x2f\x21\xa7\xe5\x83\xcd\xa3\x9b\xb4\xf2\xca\xca\x66\xc0\x36\x3b\xfa\xc3\xc4\x77\xd1\x59\x64\x06\x73\x1e\xc2\x97\x9b\xd3\x7e\xc0\x09\xbb\x30\xf6\x7b\x18\xe5\x61\x26\xf8\x79\x93\x93\x2e\x5b\x6d\x23\x1e\x76\xb5\xef\xbf\x11\xd4\x23\x3d\x3d\xcb\x43\x2a\x06\xa6\xfb\x29\xd0\xbd\x3a\x28\xc8\x09\xf7\x14\x8a\xa5\x42\x0a\x7b\x01\x4b\xa1\x76\x20\x93\x22\x7b\x61\xa9\x44\xb0\x97\xaa\xdb\x04\x96\xab\xe3\x17\x77\xed\xbb\x77\xe1\xe7\xbb\xe7\xee\x40\xa3\x41\xdb\xfb\x6d\xea\xb4\x14\xf6\x5d\x18\x77\xed\xae\xc0\xaa\x0a\x99\x76\x4e\x27\x10\x24\x2c\xc6\x59\xa1\x6e\xe1\xe9\x6c\xa9\x18\xe7\x53\x3a\xd8\xd9\x95\x24\x71\x49\xaf\x71\x4e\x59\x6d\x62\xff\xf2\xc4\xd2\x1b\x57\x1a\xdb\x6f\xdc\x68\xbd\x99\x5e\x59\x6c\x09\xd0\xda\x3c\xd9\x30\x8c\x25\xdd\x62\x38\xab\x4d\x0b\xe2\x5a\x19\xb4\x90\x5e\xfc\x93\x4a\xe3\x51\x50\x6d\x40\xd7\x72\x58\xbe\x3d\x0b\xb4\x50\x87\xa9\x9f\x0b\xcf\x5b\x27\x17\x1e\x77\x1e\x0e\x9f\x7b\xf7\xa8\xb6\x0e\xb3\x09\xec\xaa\x73\x43\x2d\xe0\xcf\x5e\x9d\xe3\x8a\x4b\xc5\xb6\x98\xb2\x5c\xa0\xe4\xce\xd7\x2f\x83\x20\xad\x3f\x3c\xb8\x05\x64\xfd\x31\xfc\xf7\xcd\xfd\x75\x3a\xcc\xd1\x09\x0f\x99\x93\x66\x55\xd5\x28\x19\xad\x00\x63\xda\xe0\xd9\xe1\x00\x77\x7e\x8a\xee\x5b\x6b\x7a\xe3\xf5\xda\x54\x3e\x0c\x40\xdb\x7a\x64\x08\xb8\xe3\xc7\x54\xa1\x36\xc0\x34\x82\x22\x0b\x19\xab\xdd\xf0\xa5\xda\xc2\xa9\x40\xe5\xde\xb8\xc0\x2b\x6a\x72\x47\x4e\x18\xc0\x92\xb6\x99\x51\x2d\xf1\x80\x8a\x4f\x56\x98\x8e\x38\x0e\x36\x98\x86\xf9\xf6\xdb\x70\xc3\x11\xbb\x9d\xd4\xb2\x76\x87\xe9\x1a\xed\x39\x3e\x09\x6e\x8b\x69\x83\xee\x15\xae\x3b\xfd\x10\x4e\x4f\x85\xb0\x18\x7b\x8a\x94\x34\x1f\x53\xae\x2f\x2d\x13\xa2\x96\x2c\x80\x27\x0b\x7e\x95\x5e\xda\x58\x3d\x7b\xee\x16\x1b\x3a\x68\x34\xc6\x47\xe0\x26\xe1\x98\x76\x0f\x8e\x39\xab\x65\x4f\xb5\xc9\x34\x49\x99\x32\xdd\xcd\xf4\x3f\x36\x6a\x06\x33\xed\x3a\x05\x58\x6d\x69\x54\x7b\xb7\x77\xd4\x8e\x28\x8c\xe6\x6e\x0f\x04\x7d\x2e\xd1\x80\x2e\x2b\x30\x7b\x49\xe9\xdc\xef\xa3\x8c\x0b\x7a\xf7\xfc\x1f\x26\x7e\x94\xa9\xd1\xb8\x1c\x94\x7f\xad\x0d\xe9\xa6\xe9\x53\x0e\x42\x65\x3a\x7c\xd8\x70\x91\xe7\xd8\xfe\x0a\x6d\xa4\xf7\x55\x61\x68\xb1\xaa\xcb\x14\xb5\x6f\x84\x4d\x4f\xf7\x5d\x30\x36\x95\x50\xf1\x68\x46\x4c\xef\x52\x6d\x87\x77\xbd\x9b\x2d\x15\x98\x09\xfa\x98\xf7\x5f\x07\x48\x6f\x67\x1b\xce\xaa\xc9\xba\x10\x9a\x57\xe3\xb9\x50\xc3\xb1\xd6\x76\x3f\x64\x3a\x2b\x6e\x4c\x2b\x57\x27\x1e\xbb\x83\x6f\x04\x41\x74\x4c\x79\x6e\xd0\x26\x10\xdf\x57\xe7\xb9\x3c\x4c\x06\x5b\xaf\x2a\x26\x3e\x38\x36\x5a\xb2\xac\xfb\x1a\x37\xb2\xf0\x1a\xcc\x70\xd2\x5b\x00\x17\x8d\x1f\x53\x82\xc9\x62\xf6\xbf\xb1\x02\x1f\xe9\x40\x48\x3d\x19\xad\xb4\x6b\x88\x56\xa0\x71\x82\xf6\x4d\x37\xda\x4f\x62\x7e\x75\x21\x17\x12\xe3\xba\x92\xc4\x78\xbf\x20\x6e\xd0\x85\x11\xc3\x9c\xe9\x79\x81\x8a\x7f\x56\x16\x75\xf8\x7a\xf0\x26\x84\x7c\xae\xd3\x35\xbd\xf6\x4a\x03\x43\xa7\x09\xbd\x6d\x38\x02\x39\x5a\x26\xa4\x59\xfe\x6c\xf8\x1b\xf2\x67\x77\xbb\xb2\x64\xfa\x32\x14\x29\x85\xb1\xb1\xb0\xd7\x35\xeb\x47\x61\xb2\xb7\xdb\x50\x6e\x58\x3c\xea\xba\x65\x25\x99\xc5\xa1\xb1\xe3\x32\xfd\x2d\x69\x2d\x40\x0a\xc1\x39\xaa\xe7\x79\x61\xff\x0e\x00\x00\xff\xff\xa2\xab\xb1\x3f\xfa\x17\x00\x00")

func assetsNormalizeCssBytes() ([]byte, error) {
	return bindataRead(
		_assetsNormalizeCss,
		"assets/normalize.css",
	)
}

func assetsNormalizeCss() (*asset, error) {
	bytes, err := assetsNormalizeCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/normalize.css", size: 6138, mode: os.FileMode(436), modTime: time.Unix(1587766125, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCreateFolderTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\xdf\x4f\xe3\x38\x10\x7e\xe7\xaf\x18\x59\x3c\xdc\x49\xb7\x2d\xb0\xba\x97\x2a\xed\x89\x63\x17\x09\x09\x6e\x11\x3f\x74\xcf\x4e\x3c\x21\xd6\x3a\x76\xd6\x76\x80\x12\xfa\xbf\x9f\x9c\x38\x69\xd2\xa6\x6d\x0a\xbd\x27\x82\xed\xf9\xe6\x9b\x6f\x26\x19\x4f\x8b\x82\x61\xcc\x25\x02\xb1\xdc\x0a\x24\x8b\xc5\x11\x40\x51\xf0\x18\xf0\x17\x8c\x68\x64\xb9\x92\x40\x22\x8d\xd4\xfa\x4d\x00\xab\xf4\x17\xa6\x55\x06\xd5\x32\xc4\x4a\x30\xd4\xa5\x1d\x4a\xd6\x8f\x80\x8c\xdb\x35\x7b\xb7\xe8\xad\xa1\x28\x46\x97\xe5\xd3\xe8\x1f\x9a\xa2\x07\xd9\x08\xa7\xd3\x35\x30\x8d\xa9\x7a\xc6\x01\x70\xf5\xdf\xa3\x65\xec\xa1\x62\xf3\x0a\x30\x48\xce\x66\x25\x6e\xe9\x72\x74\x65\xce\x59\xca\xa5\xf7\xf5\x2f\x8a\x48\xa5\x08\x56\x81\x4d\x10\xa8\xdb\xe2\xc6\x6a\x6a\x95\x86\x37\x25\xd1\x5b\xa2\x30\xd8\x6f\x92\xe5\xa1\xe0\x51\xe7\xac\x0f\x31\x18\x3b\xcf\xbb\xc4\x0f\x92\xaf\xb3\x8b\x4a\x75\x0a\x12\x5f\x20\xcf\x84\xa2\xcc\x47\x1d\x8c\x93\xaf\xb3\xa1\x79\x70\x50\xdf\xb7\x24\x60\x00\x58\x9d\x05\x07\x75\xb7\x55\xfe\x0d\x60\xa3\xef\x5a\x2b\xed\xa5\x0a\x42\x30\x76\x2e\x70\x4a\x22\x25\x94\x9e\x68\x64\x64\x56\x14\xf5\x99\x60\x1c\x76\x11\x82\x58\xe9\x14\x52\xb4\x89\x62\x53\x72\xfb\xe3\xfe\x81\xd4\xa9\x3b\x1e\xdd\xe1\xaf\x1c\x8d\x85\x77\x88\x8c\x8e\xbd\x07\xc7\x65\x02\x01\x97\x59\x6e\xc1\xce\x33\x9c\x12\x8b\xaf\x96\x80\xa4\x29\x4e\x49\x8b\x31\x81\x67\x2a\x72\x9c\x92\xd5\x40\xc8\x46\x49\x35\x52\xa6\xa4\x98\x7b\x82\x30\x9e\xf9\xa8\xb4\x7f\xba\xa1\xaf\x3c\xcd\x53\x70\x76\xcf\xe8\x33\x67\x26\xd5\xa9\x1d\x9c\x6e\xe8\xeb\x79\x69\xf6\x58\x59\x11\xc8\x04\x8d\x30\x29\x77\xa7\xe4\x04\x52\xa4\xd2\x80\x54\x20\x78\xca\x2d\x29\x41\x61\x3d\x88\x55\x1c\x78\xe7\xd2\x1a\x70\x71\xed\xe2\xcb\xd4\x8b\xfc\x08\xe3\x6f\xb5\xdd\xa7\x39\x37\x48\x43\x58\xfb\x17\x23\x9c\x5b\x34\x90\xa1\x06\x83\x91\x92\x6c\xe2\xbd\x0c\xa0\xff\x98\xfd\xed\x8c\x6f\x51\xdf\x63\xd4\x53\x10\xab\x47\xe0\xbd\xf2\xb6\x58\xd4\xa1\x40\x37\xe2\xd3\x10\xce\xfe\x3c\xf9\x19\xc2\xe9\x4d\xb8\x85\x79\x2d\xf4\x67\xb8\x7f\x13\x3b\xb9\x77\x8e\x1c\x8a\x7b\xcc\x05\x1a\xe0\x12\x6c\xc2\x8d\xff\x18\x0c\xae\x97\x4b\x2e\xf0\x42\xe5\xd2\x7e\xa2\x52\x1a\x8c\x21\x35\x62\x95\xa5\x02\x0c\x7f\x43\x50\xf1\x3a\xe5\x41\xa4\x1f\x1c\xc6\x3d\x7f\xeb\xfb\x64\xb4\xb7\x0f\xa5\x70\xc9\xd6\xd5\x84\x93\x7a\x0f\x9e\x4e\x98\xcd\x34\xeb\xdd\x43\xd6\x01\x08\x1e\xa3\xe5\xe9\x3e\x2c\xaf\x79\x8c\x0f\xbc\xf7\xfb\xdb\xda\x85\x77\x60\xb9\xa6\xee\xf3\xbb\x85\x69\x0a\xa7\x06\x4e\x93\xd3\xb3\xb4\x87\xe8\x95\x29\xfb\xb1\x6f\x57\x99\xe6\xcf\xd4\xe2\x5f\x35\x51\x93\x51\x39\x9b\xa3\xe9\x30\xd6\x94\x71\xb5\x42\xf9\xca\xdc\x56\xa6\x0d\x61\xab\x73\x5c\x32\xaa\xba\xdc\xea\xe1\xc5\x22\x4a\x30\xfa\x89\x6c\xd9\x2b\x82\x71\xe9\xb3\x43\x40\xaa\x0f\xf8\x8f\xa9\x30\xab\x04\xa4\xb2\x7b\x93\xd8\x24\x95\xe0\xc6\xd2\x50\x20\xb8\x5e\x07\xe1\xbc\x7b\x0b\xfa\x88\x82\xe5\x0d\xeb\x87\x14\xf3\x3b\xa4\xcc\x41\x0f\xd3\x72\xcd\xec\x90\xaa\x6e\xe6\xb4\x5b\xdf\x7d\x89\x2d\x95\x76\x97\x16\xae\xdd\xd5\x2e\xa2\x99\x8d\x12\x0a\xb1\xd2\x20\xd4\xd3\x13\x32\xc8\x0d\x6a\x33\xd9\x5b\xdf\x8b\x0a\xe9\x52\xe9\xeb\x12\xe7\xd1\xc1\x0c\x51\xb8\xd7\xf0\x70\x1a\x6f\xe7\xb5\x4b\xe5\x8f\x90\xdb\xa5\x33\x95\x4a\xce\x53\x95\x9b\xcf\x4b\x7d\x5e\x43\xed\x27\x74\x63\xf6\x7f\xc8\xbc\xce\x69\xb8\xc8\x43\x89\xf5\x49\x9c\x51\x63\x5e\x94\x1e\x7c\x7b\xb9\xf5\xe7\x5b\x2d\x40\xe9\x86\x53\xbd\x0b\x84\xf4\xb6\xf6\x73\xc6\x80\xca\x32\x83\x5b\x1c\x76\x1a\x85\x3b\xeb\x5e\x32\x2e\x6b\x26\xae\x9a\x46\xd7\xd5\xca\xb2\x0f\x2d\x57\x5b\x9e\x57\xe0\xb3\x86\xfc\xba\x8b\x66\xaf\xe5\xa4\x27\xd8\x51\x67\xa3\x37\xc8\x1d\xf3\x79\x10\xe6\xd6\x2a\xe9\x29\x99\x3c\x74\x77\xa6\xda\x81\x3f\xea\x23\xad\x00\x88\x9f\x29\x83\x71\x65\x39\x5b\x99\x4d\x77\xcc\xf3\x5b\xfd\x95\x07\x57\xbc\x3d\x66\x6c\x8b\xb7\x60\xec\x06\xbb\xe5\x2c\xfc\x64\xe1\x37\x81\xb2\x29\x81\xf2\x5d\xff\x1d\x4e\xa0\x3c\xfd\x68\x7c\x53\xaa\xe5\x09\xca\xf6\xe4\x25\xb3\xba\x49\x93\x65\x33\x37\xc2\x05\x63\xcb\xda\x6b\xb5\xd0\xab\xeb\xd5\x3c\xbb\x5c\x0d\xc6\x35\x56\x51\x68\x2a\x9f\x10\x8e\xf3\x3f\x8e\xb3\x17\x66\x60\x32\xed\x72\xab\x65\xe9\x3a\x2f\x8a\xe3\xdc\x4d\xb1\x5d\x37\x45\x51\x62\xac\x6f\x34\xaf\xe5\xc6\x31\xb7\x7e\x6b\x37\x0c\xbb\x3d\xd5\x99\x70\xc6\xb0\x53\xe5\xad\xba\x73\xec\x5a\x65\xdd\x4e\x6c\x27\x7b\xb5\x85\x4e\xbf\xb8\xb2\x26\x33\xed\x95\x6a\x67\xb3\x52\xac\xca\x63\xfd\x5f\x9f\x92\xcb\x9c\x37\x59\x6b\xfd\x3c\xd3\x3c\x58\x4c\x33\x41\x2d\x02\x11\x74\xae\x72\x4b\x60\xb4\x58\x1c\xfd\x17\x00\x00\xff\xff\x05\xa6\xe3\xf4\xbc\x12\x00\x00")

func templatesCreateFolderTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCreateFolderTpl,
		"templates/create-folder.tpl",
	)
}

func templatesCreateFolderTpl() (*asset, error) {
	bytes, err := templatesCreateFolderTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/create-folder.tpl", size: 4796, mode: os.FileMode(436), modTime: time.Unix(1587762701, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFolderListingTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x4d\x6f\xdc\x36\x10\xbd\xef\xaf\x98\x12\x3e\x24\x07\xaf\x8a\xe6\x16\x48\x02\x0a\xa7\x06\x0c\x24\x69\x11\xbb\x28\xd0\x4b\x41\x89\xa3\x15\x51\x7e\xa8\xe4\xc8\xf0\x46\xd6\x7f\x2f\x28\x51\x5f\xeb\x5d\xc7\x37\xae\xf8\x66\xde\xf0\xcd\xe3\x70\xbb\x4e\x60\x25\x0d\x02\x23\x49\x0a\x59\xdf\xef\x00\xc8\xba\x6b\xe1\x6c\x03\x4a\x7a\x92\xe6\x00\x95\x55\x02\x1d\x74\xdd\xfe\x76\x58\xed\xbf\x72\x8d\x7d\xbf\xeb\x3a\x34\xa2\xef\x77\xbb\x25\x4d\x61\xc5\x71\xcc\x92\xd6\xbf\xe4\x3b\x00\x80\xae\x93\x15\xec\xef\xfc\xaf\x42\x4b\x33\x6c\x01\xfc\x85\xaa\xb4\x1a\x81\x2c\x50\x8d\xc0\xc3\x96\xf4\xe4\x38\x59\x07\xdf\xad\xc1\x18\x89\xca\xe3\xf9\x90\xa6\x2d\x94\x2c\x37\xd8\xa1\x16\x80\x34\x09\xcc\x43\x05\x1f\xf2\xcf\xaf\x1f\x21\x4d\xea\x0f\x03\x76\x2c\xf2\x37\xe7\xac\x8b\x7c\x69\x01\x9e\x8e\x0a\x33\x56\x5a\x65\xdd\x47\x87\x82\xe5\x5d\x37\x61\xd2\xa4\xc8\x23\xce\x25\xf9\x6e\x29\x20\x10\xfb\x86\x9b\xd5\xe1\x8d\x25\x78\x37\x11\x7f\xe1\x4f\xb7\x52\xe1\x8d\x6d\x0d\xc1\x33\x48\xff\x37\x3a\xfb\x3e\x92\x86\x80\xfd\x1d\xa1\xf6\xf0\x0c\x0a\x4d\xdf\x43\xb2\x2a\x7a\x1d\xdb\xf7\x50\x49\x85\xfe\xe4\xf4\x17\x28\x1f\x2c\x71\x75\x2f\xbf\xe3\x2b\x94\xfb\xb8\x5f\x1c\x09\x7d\xdf\x43\x69\x8d\x6f\x35\x0a\xb0\xd5\x82\x3c\x9f\x72\x0a\xe1\x8f\x5c\x2a\x5e\xa8\xd3\x9e\xbc\x22\xc4\x85\xa2\xbe\xf0\x27\xa9\x5b\x3d\x9c\x11\x7c\xc0\xbc\x90\x61\xcb\xfd\x36\xc6\xcf\xb2\xc2\x07\xa9\x7f\xc8\xa8\x64\x85\x14\x70\x1b\xd6\x55\xb4\x68\x1d\x27\x69\xcd\x4b\xe6\x34\x19\xdb\x1f\x96\x95\x75\x1a\x34\x52\x6d\x45\xc6\xfe\xf8\xfd\xfe\x81\x01\x2f\x43\x58\xc6\x18\xa0\x29\xe9\xd8\x60\xc6\x74\xab\x48\x36\xdc\x51\x12\xf0\xd7\x82\x13\x67\x93\x7d\xae\xf6\xdf\xf0\xbf\x16\x7d\xf0\x4a\xe9\x5d\x15\xe9\xfe\x6c\x94\xe5\x02\xf8\x58\x6d\x2a\x4d\xd3\x12\x8c\xd9\xc2\x17\x06\x86\xeb\xb8\xf6\x0c\x92\x95\x19\xaf\xf6\x37\xbc\xa1\xb2\xe6\x77\x9f\x66\xa7\xbb\x08\x48\xa5\x3e\x80\x77\x65\xc6\xba\xae\x75\xea\xd6\x3a\x60\xe5\x88\x66\xc0\xa4\x60\xdb\xe8\x39\xf1\x86\xbf\x96\x42\xa0\x99\x2a\x98\xe1\xec\x91\xab\x16\x43\xe6\x37\xe4\x20\x7c\xa2\x29\xc3\xbd\x55\x6d\x90\x8c\x41\xa3\x78\x89\xf5\xd0\x8d\x8c\x05\x20\x48\x33\x0c\x83\x58\x23\xf8\x19\x9a\xe4\x27\x47\x5b\x3b\x23\x2d\x5a\x22\x6b\x22\x97\x6f\x0b\x2d\x67\xb6\xb1\x3d\x0c\x62\xb5\xed\xa0\x33\xcb\x3d\x1a\x91\x26\x63\x5c\x3e\x34\x39\xb4\x6a\x19\x1d\x07\x82\x77\x0a\x0d\x8c\x37\xe9\x3d\xfc\x3c\x5a\x61\xd3\xff\xc6\x7a\xfa\x51\x5f\x5f\x51\xf2\xa4\x32\xa7\xf9\x72\x4c\x0a\x77\x2e\x8f\x46\x4e\xc9\x4d\xcb\xf0\x43\xe4\x61\xd6\xa5\x09\x89\xed\xd7\x1b\x87\x9c\x10\x04\xa7\x33\x9b\xe1\x6e\xbd\xfc\x3a\xba\x0e\xc5\x76\xe7\xdc\x80\x9f\x22\xbe\xa1\xb6\x8f\x78\x8a\x5f\x5a\x11\x94\x5c\xca\xed\x3a\xc7\xcd\x01\xe1\xaa\x82\x8f\x59\xd4\x72\x01\x9e\x1e\x2b\xe5\x50\x3b\xac\xd6\x66\xe5\xde\x23\x5d\x0b\xc5\x80\x8d\x13\x3f\x38\x76\x35\xf1\x81\x05\x2d\x19\x5c\x55\xf1\x01\x60\x40\xdc\x1d\x90\x32\xf6\x4f\xa1\xb8\xf9\x37\x8c\xf8\x79\x33\x4d\x78\xfe\x52\x84\x01\x30\x8a\xf7\x29\x08\xf8\x0c\x61\x50\xf8\x00\x3f\x0b\xdd\x8e\xa9\x0b\xa0\x49\xd9\x4b\xc0\x78\x75\xcf\x8b\x3c\xff\xb8\x60\xed\xd5\x3e\x44\x33\x7d\x1d\x64\x58\xae\xe4\xac\x47\xee\x62\xc7\x16\xaf\xcf\x7d\x7a\x63\x0f\x57\x17\x2d\x99\x8d\x39\x5d\x98\x93\x57\xfd\xa1\x96\x7e\x7a\x9c\xa5\x87\xb2\x75\x0e\x0d\xa9\x23\xa0\x6e\xe8\xf8\xd3\xfa\x5d\x5d\xff\xdd\x20\xd4\x8d\x0a\xe2\x33\xc5\x8f\xb6\x25\x06\xfb\xbe\xdf\xfd\x1f\x00\x00\xff\xff\xf6\x30\x2f\x52\xce\x08\x00\x00")

func templatesFolderListingTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesFolderListingTpl,
		"templates/folder-listing.tpl",
	)
}

func templatesFolderListingTpl() (*asset, error) {
	bytes, err := templatesFolderListingTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/folder-listing.tpl", size: 2254, mode: os.FileMode(436), modTime: time.Unix(1587761122, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFolderLoginTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\x4f\x8b\xd4\x40\x10\xc5\xef\xf9\x14\x45\xe3\x61\xf7\xe0\x44\xdc\xdb\xd2\x19\xf0\xa0\x20\x88\x0e\xfe\x41\xf0\xd6\x49\x57\x26\x0d\x9d\xae\xd8\x5d\x71\x8d\x6d\xbe\xbb\x24\x9d\xcc\x64\x64\x47\x11\x73\x4a\x53\x55\xef\x55\xfd\x5e\x8c\x1a\x6b\xe3\x10\x04\x1b\xb6\x28\xc6\x31\x03\x60\xf2\x4f\xb5\xa7\x0e\xac\x09\x6c\xdc\x11\x6a\xb2\x1a\x3d\xc4\xb8\x7b\x35\xff\xed\xde\xaa\x16\xc7\x31\x8b\x11\x9d\x1e\xc7\x2c\x3b\xcb\x94\xa4\x87\xa4\x22\x9b\xe7\xfb\x0c\x00\x20\x46\x53\xc3\xee\x75\x78\xa1\x5b\xe3\xe6\x12\xc0\x67\xb4\x15\xb5\x08\x4c\xc0\x0d\x82\x9a\x4a\x26\xb0\x57\x4c\x1e\x7e\x90\xc3\x65\x12\x6d\xc0\xc7\x47\xba\xbe\xb4\xa6\xba\xe8\x9d\x77\x01\x90\xf9\xe4\x3c\x6f\x70\xb7\x7f\x43\x47\xe3\xa6\x99\x2b\x37\xc8\xbc\xb9\x9b\x9b\xd3\x96\x2f\xbd\x27\xbf\x18\xca\x12\x02\x0f\x16\x0b\x51\x91\x25\x7f\xef\x51\x8b\x7d\x8c\x6b\x8f\xcc\xcb\x7d\x76\xf6\x5d\x25\x1c\x31\xdc\x98\xf0\x05\x3d\xc1\x6a\x75\x50\x21\x3c\x90\xd7\xb7\xab\x72\x6d\xd0\xea\x80\x9c\x00\x01\xa4\x2d\x1f\x0c\x37\xe9\xb6\xa5\xff\x7e\x29\xcb\x9a\x7c\x0b\x2d\x72\x43\xba\x10\x87\x77\x1f\x3e\x0a\x58\x47\x27\xdb\x27\xbb\xf7\xf8\xb5\xc7\xc0\xf0\x13\xaa\xe0\xeb\xc5\x66\xfa\x56\x6b\x90\xc6\x75\x3d\x03\x0f\x1d\x16\x62\x35\x10\xe0\x54\x8b\x85\x38\x9c\xde\xdf\x94\xed\xb1\x10\x02\xf2\xb3\x81\xcc\x4b\xbf\x79\x95\x3d\x33\xb9\x45\x29\xf4\x65\x6b\x78\xd5\x51\x15\x1b\x72\x27\x15\x3b\x9d\x25\x52\x06\x32\x4f\x73\xab\x90\xcc\xa7\xa3\xd2\x4b\xe6\x5b\x20\xbf\x13\x3d\x32\xdc\x58\x74\x27\x9a\x9f\x02\xfa\x70\x0b\xcf\x52\xd8\x97\x28\x37\x20\x07\xea\x3d\x54\x1e\x35\x3a\x36\xca\x86\xfb\xec\x6f\x28\xff\x00\x32\xe9\x5e\x30\x64\xfc\x7e\xba\x7b\x2e\x3f\x06\x6f\x8b\xee\xff\xa3\xd8\xaa\xfd\x43\x0c\x7d\x40\x7f\x3d\x8a\x73\x10\x57\x62\xd8\xfc\x30\xb6\x9d\x55\x8c\x20\xac\x1a\xa8\x67\x01\xbb\x71\xcc\x7e\x05\x00\x00\xff\xff\x2b\xa5\xc4\x20\x45\x04\x00\x00")

func templatesFolderLoginTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesFolderLoginTpl,
		"templates/folder-login.tpl",
	)
}

func templatesFolderLoginTpl() (*asset, error) {
	bytes, err := templatesFolderLoginTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/folder-login.tpl", size: 1093, mode: os.FileMode(436), modTime: time.Unix(1587729782, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIndexTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4d\x8b\xdb\x30\x10\xbd\xfb\x57\x4c\x45\x0e\xed\x61\x6d\xe8\xde\x8a\x12\x28\x6d\x17\xf6\xb2\x5d\x76\x0b\x3d\xcb\xd6\x38\x16\xe8\x23\x95\xc7\x81\x54\xab\xff\x5e\xe4\x8f\x38\x89\xbd\xd0\x9b\xa5\x79\x7a\x6f\xe6\x3d\xc9\x21\x48\xac\x95\x45\x60\xa4\x48\x23\x8b\x91\x9c\xbf\x93\xde\x1d\xa0\x71\x06\x43\x40\x2b\x63\xcc\xb2\x19\x57\x3a\x79\x62\x31\x66\x00\xbc\xf9\xbc\xcb\x00\x00\x42\x50\x35\xe4\x8f\xed\x57\x69\x94\xed\x4b\x00\xbf\x51\x57\xce\x20\x90\x03\x6a\x10\x44\x2a\xa9\x96\xbc\x20\xe7\xe1\xaf\xb3\x38\x9e\x44\xdd\xe2\xfa\x91\x43\x57\x6a\x55\x5d\x61\xfb\x5e\x00\x78\x91\x94\xb3\x35\x61\x2e\xa0\xf1\x58\x6f\x59\x08\x9d\xd7\x0f\xce\x03\xab\x3c\x0a\xc2\xbb\xda\x69\x89\x9e\xc5\xc8\x86\xa6\x79\xd9\x11\x39\x3b\x2c\x00\xbe\xf5\x28\x18\x50\x03\xa0\x98\x11\xbc\x10\xbb\x6c\x6e\x61\x92\xb6\x8e\xe0\xa3\x46\x0b\xf9\x43\x7f\xae\xfd\x34\x8e\xc2\x4b\x5f\xec\x6e\xbe\x9e\xdc\xc8\x0e\x95\xb3\xb5\xda\x77\x1e\x25\x9c\x90\x3e\x64\x37\x3e\xf0\xe6\x7e\x37\xf2\xf1\xa2\xb9\x1f\x79\x48\x94\x1a\xa7\x6e\x39\xf9\xe9\x33\x2d\xe4\xee\x49\x18\xe4\x05\xc9\xeb\xdd\x57\x65\xab\x9b\xed\xb5\xac\x26\xf8\x73\xef\xf8\x92\xe6\x87\x54\xb4\xdc\x7d\x41\xe3\x8e\x0b\xf6\x29\xa3\xc1\xc1\xb9\xcd\x10\xbc\xb0\x7b\x84\x4d\x0d\x5f\xb6\x67\xbf\x66\xe8\xed\x40\x2b\x41\x0e\xee\xdd\x69\xd5\x92\xb2\x7b\x36\x6d\x30\xd8\xd4\x79\x9a\x3f\x45\x1b\xc2\x79\x91\x32\x5b\x76\xdd\x03\x86\xb0\xbf\xa7\xc0\xdf\x80\x94\xc1\x36\xc1\x17\x36\x6d\xde\xf1\x69\x28\xd6\xf9\x63\xfb\xec\xd5\x51\x10\xc6\x68\xdd\x14\xe1\x09\xdb\xd1\x85\xa5\xf8\xfb\x43\xa1\x54\xb4\x3e\x11\xf6\xe6\xaf\x8d\x72\x5e\x00\xf0\xda\x79\x03\x06\xa9\x71\x72\xcb\x9e\x7f\xbe\xfe\x62\x20\x2a\x52\xce\xae\x68\x79\xb3\xae\x74\xc1\x97\x0c\xd8\xe4\x2f\xf8\xa7\xc3\x96\xe0\x0d\xaa\xd6\xd7\x17\x26\xf4\x92\xca\x1e\x3a\x02\x3a\x1d\x70\xcb\x1a\x25\x25\x5a\x06\x56\x18\xdc\xb2\x44\xc8\xe0\x28\x74\x87\x49\x7e\x96\x80\xe2\x5a\x64\x7c\x83\x23\x49\xdb\x95\x46\xd1\x4d\x86\xd7\xaf\x74\xb8\x55\x69\xd8\x0b\x2b\xfe\xfb\x06\xce\x15\x5e\x9c\x9f\xd3\xc5\x2f\xee\xfc\x41\x68\x0e\x3a\xdd\x0e\xa6\xc5\xc9\x75\xc4\x20\x8f\x31\xfb\x17\x00\x00\xff\xff\x60\x3f\xcf\x8c\x2c\x05\x00\x00")

func templatesIndexTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexTpl,
		"templates/index.tpl",
	)
}

func templatesIndexTpl() (*asset, error) {
	bytes, err := templatesIndexTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.tpl", size: 1324, mode: os.FileMode(436), modTime: time.Unix(1587672429, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLayoutTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\x41\x6e\x43\x21\x0c\x44\xf7\x39\x85\xe5\x7d\x83\xb2\x27\x2c\x7b\x0f\x5a\x1c\x81\xea\x0f\x11\x38\x52\x7f\x2d\xdf\xbd\x0a\xe4\x4b\xd9\x8d\x6c\xcf\xbc\xb1\x6a\xa2\x5b\xa9\x04\xc8\x71\x6f\x0f\x41\xb3\x13\x80\xcf\xb2\x71\x98\x82\x62\x7a\x0a\x00\x2f\x45\x98\x82\xaa\xd0\x76\xe7\x28\x04\x38\x27\x08\x67\x33\xef\xd6\x76\x5d\x72\xa9\x3f\xd0\x89\xaf\x38\x64\x67\x1a\x99\x48\x10\x72\xa7\xdb\x15\x5d\x1c\x83\x64\xb8\xda\xfa\x16\xb9\xfc\xd1\xf9\x7b\x0c\x04\x37\x69\xee\xc0\xf9\xaf\x96\xf6\x57\x5a\xbe\x04\x1f\x5f\x6e\xd5\x47\xe7\xcf\xd6\x01\x4b\x4d\xf4\x8b\x66\x18\xa4\xf5\x8f\xd4\xdb\xdd\xbb\x18\xbc\xcb\x97\x65\x7b\xef\xf9\x0c\x9b\x35\x27\xe3\x88\xf6\x6e\x7d\xa9\x4a\x35\x99\x9d\xfe\x03\x00\x00\xff\xff\xd0\xc6\xcc\x1a\x0b\x01\x00\x00")

func templatesLayoutTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesLayoutTpl,
		"templates/layout.tpl",
	)
}

func templatesLayoutTpl() (*asset, error) {
	bytes, err := templatesLayoutTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/layout.tpl", size: 267, mode: os.FileMode(436), modTime: time.Unix(1587766170, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/normalize.css": assetsNormalizeCss,
	"templates/create-folder.tpl": templatesCreateFolderTpl,
	"templates/folder-listing.tpl": templatesFolderListingTpl,
	"templates/folder-login.tpl": templatesFolderLoginTpl,
	"templates/index.tpl": templatesIndexTpl,
	"templates/layout.tpl": templatesLayoutTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"normalize.css": &bintree{assetsNormalizeCss, map[string]*bintree{}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"create-folder.tpl": &bintree{templatesCreateFolderTpl, map[string]*bintree{}},
		"folder-listing.tpl": &bintree{templatesFolderListingTpl, map[string]*bintree{}},
		"folder-login.tpl": &bintree{templatesFolderLoginTpl, map[string]*bintree{}},
		"index.tpl": &bintree{templatesIndexTpl, map[string]*bintree{}},
		"layout.tpl": &bintree{templatesLayoutTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
